{"version":3,"file":"static/js/134.423aadde.chunk.js","mappings":"4NACaA,EAAe,mCAEfC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIC,UAAU,aAAd,SACGH,EAAOI,KAAI,SAAAC,GAAK,OACf,eAAIF,UAAU,aAAd,UACE,UAAC,KAAD,CACEG,MAAO,iBAAO,CACZC,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,aAAc,SACdC,eAAgB,gBANX,EAQPC,GAAE,kBAAaR,EAAMS,IACrBC,MAAO,CAAEC,KAAMf,GAVjB,WAYE,gBACEE,UAAU,YACVc,IAAKnB,EAAeO,EAAMa,YAC1BC,IAAKd,EAAMe,MACXb,MAAO,MAERF,EAAMe,UAnBqBf,EAAMS,GADvB,KA0BtB,C,gGCcD,UAzCe,WACb,OAA2BO,EAAAA,EAAAA,UAAS,IAApC,eAAOhB,EAAP,KAAciB,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KAEA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAYH,EAAOI,IAAP,SACbD,IAGLE,EAAAA,EAAAA,IAAgBF,GAAWG,KAAKV,EACjC,GAAE,CAACI,IAWJ,OACE,iCACE,kBAAMvB,UAAU,YAAY8B,OAAO,GAAGC,SAPzB,SAAAC,GACfA,EAAEC,iBACFT,EAAU,CAAEJ,MAAAA,GACb,EAIG,WACE,kBACEpB,UAAU,aACVkC,KAAK,OACLC,YAAY,uBACZC,SAhBS,SAAAJ,GACfX,EAASW,EAAEK,OAAOC,MACnB,KAgBK,mBAAQJ,KAAK,SAASlC,UAAU,aAAhC,UACE,SAAC,MAAD,CAAUA,UAAU,0BAGxB,SAAC,IAAD,CAAYH,OAAQK,MAGzB,C,uNC3CDqC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAgB,mCAAG,sGAGpBF,EAAAA,EAAAA,IAAA,sCAAyCC,IAHrB,uBAEpBE,EAFoB,EAE5BC,KAAQD,QAFoB,kBAIvBA,GAJuB,2CAAH,qDAOhBE,EAAY,mCAAG,WAAMjC,GAAN,yFACH4B,EAAAA,EAAAA,IAAA,iBACX5B,EADW,oBACG6B,EADH,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZf,EAAe,mCAAG,WAAMR,GAAN,yFAGnBmB,EAAAA,EAAAA,IAAA,gCACiBC,EADjB,kBACkCpB,EADlC,+CAHmB,uBAEnBsB,EAFmB,EAE3BC,KAAQD,QAIVG,QAAQC,IAAIJ,GANiB,kBAOtBA,GAPsB,2CAAH,sDAUfK,EAAe,mCAAG,WAAMpC,GAAN,yFAGnB4B,EAAAA,EAAAA,IAAA,iBACE5B,EADF,4BACwB6B,EADxB,2BAHmB,uBAEnBE,EAFmB,EAE3BC,KAAQD,QAFmB,kBAMtBA,GANsB,2CAAH,sDASfM,EAAe,mCAAG,WAAMrC,GAAN,yFAGnB4B,EAAAA,EAAAA,IAAA,iBAAoB5B,EAApB,4BAA0C6B,EAA1C,oBAHmB,uBAEnBS,EAFmB,EAE3BN,KAAQM,KAFmB,kBAItBA,GAJsB,2CAAH,sDAOfC,EAAS,mCAAG,WAAMC,GAAN,yFAGbZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,oBAAuCX,IAH1B,uBAEbY,EAFa,EAErBT,KAAQS,OAFa,kBAIhBA,GAJgB,2CAAH,qD","sources":["components/MoviesList.jsx","pages/Movies.jsx","servises/api.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className=\"Movie_list\">\n      {movies.map(movie => (\n        <li className=\"Movie_link\" key={movie.id}>\n          <NavLink\n            style={() => ({\n              width: '200px',\n              height: '350px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignContent: 'center',\n              justifyContent: 'space-between',\n            })}\n            to={`/movies/${movie.id}`}\n            state={{ from: location }}\n          >\n            <img\n              className=\"Movie_img\"\n              src={BASE_IMG_URL + movie.poster_path}\n              alt={movie.title}\n              width={200}\n            />\n            {movie.title}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { getFilmsByQuery } from '../servises/api';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { MoviesList } from 'components/MoviesList';\nimport { FcSearch } from 'react-icons/fc';\n\nconst Movies = () => {\n  const [movie, setMovies] = useState([]);\n  const [query, steQuery] = useState('');\n\n  const [params, setParams] = useSearchParams();\n\n  useEffect(() => {\n    const movieName = params.get(`query`);\n    if (!movieName) {\n      return;\n    }\n    getFilmsByQuery(movieName).then(setMovies);\n  }, [params]);\n\n  const onChange = e => {\n    steQuery(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setParams({ query });\n  };\n\n  return (\n    <>\n      <form className=\"Find_form\" action=\"\" onSubmit={onSubmit}>\n        <input\n          className=\"Input_form\"\n          type=\"text\"\n          placeholder=\"Enter the movie name\"\n          onChange={onChange}\n        />\n        <button type=\"submit\" className=\"Search_btn\">\n          <FcSearch className=\"Search_btn-icon\" />\n        </button>\n      </form>\n      <MoviesList movies={movie} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '74469b9d93972ec6b26a5796c39ad279';\n\nexport const getTrandingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return results;\n};\n\nexport const getFilmsById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getFilmsByQuery = async query => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  console.log(results);\n  return results;\n};\n\nexport const getReviewByFilm = async id => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return results;\n};\n\nexport const getActorsByFilm = async id => {\n  const {\n    data: { cast },\n  } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  return cast;\n};\n\nexport const getGenres = async movieId => {\n  const {\n    data: { genres },\n  } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return genres;\n};\n"],"names":["BASE_IMG_URL","MoviesList","movies","location","useLocation","className","map","movie","style","width","height","display","flexDirection","alignContent","justifyContent","to","id","state","from","src","poster_path","alt","title","useState","setMovies","query","steQuery","useSearchParams","params","setParams","useEffect","movieName","get","getFilmsByQuery","then","action","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","axios","API_KEY","getTrandingFilms","results","data","getFilmsById","console","log","getReviewByFilm","getActorsByFilm","cast","getGenres","movieId","genres"],"sourceRoot":""}