{"version":3,"file":"static/js/597.f1a70600.chunk.js","mappings":"uMAsDA,UA/Ca,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,IAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GAASI,KAAKL,EAC/B,GAAE,CAACC,IAECF,EAIL,OACE,yBACGA,EAAKO,OAAS,GACb,eAAIC,UAAU,YAAd,SACGR,EAAKS,KAAI,SAAAC,GAAK,OACb,gBAAIF,UAAU,YAAd,UACGE,EAAMC,cACL,gBACEH,UAAU,aACVI,IAAG,UAAKC,EAAAA,EAAeH,EAAMC,cAC7BG,IAAKJ,EAAMK,KACXC,MAAO,IACPC,OAAQ,OAGV,gBACET,UAAU,aACVI,IAAG,UA/BC,2DAgCJE,IAAKJ,EAAMK,KACXC,MAAO,IACPC,OAAQ,OAGZ,uBAAIP,EAAMK,QACV,uCAAeL,EAAMQ,eAnBQR,EAAMS,GADxB,OAyBjB,2CAIP,C,4GCnDYN,EAAe,mCAEfO,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIf,UAAU,aAAd,SACGa,EAAOZ,KAAI,SAAAe,GAAK,OACf,eAAIhB,UAAU,aAAd,UACE,UAAC,KAAD,CACEiB,MAAO,iBAAO,CACZT,MAAO,QACPC,OAAQ,QACRS,QAAS,OACTC,cAAe,SACfC,aAAc,SACdC,eAAgB,gBANX,EAQPC,GAAE,kBAAaN,EAAML,IACrBY,MAAO,CAAEC,KAAMV,GAVjB,WAYE,gBACEd,UAAU,YACVI,IAAKC,EAAeW,EAAMS,YAC1BnB,IAAKU,EAAMU,MACXlB,MAAO,MAERQ,EAAMU,UAnBqBV,EAAML,GADvB,KA0BtB,C,uNC/BDgB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAgB,mCAAG,sGAGpBF,EAAAA,EAAAA,IAAA,sCAAyCC,IAHrB,uBAEpBE,EAFoB,EAE5BC,KAAQD,QAFoB,kBAIvBA,GAJuB,2CAAH,qDAOhBE,EAAY,mCAAG,WAAMrB,GAAN,yFACHgB,EAAAA,EAAAA,IAAA,iBACXhB,EADW,oBACGiB,EADH,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZE,EAAe,mCAAG,WAAMC,GAAN,yFAGnBP,EAAAA,EAAAA,IAAA,gCACiBC,EADjB,kBACkCM,EADlC,+CAHmB,uBAEnBJ,EAFmB,EAE3BC,KAAQD,QAIVK,QAAQC,IAAIN,GANiB,kBAOtBA,GAPsB,2CAAH,sDAUfO,EAAe,mCAAG,WAAM1B,GAAN,yFAGnBgB,EAAAA,EAAAA,IAAA,iBACEhB,EADF,4BACwBiB,EADxB,2BAHmB,uBAEnBE,EAFmB,EAE3BC,KAAQD,QAFmB,kBAMtBA,GANsB,2CAAH,sDASfjC,EAAe,mCAAG,WAAMc,GAAN,yFAGnBgB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,4BAA0CiB,EAA1C,oBAHmB,uBAEnBpC,EAFmB,EAE3BuC,KAAQvC,KAFmB,kBAItBA,GAJsB,2CAAH,sDAOf8C,EAAS,mCAAG,WAAM5C,GAAN,yFAGbiC,EAAAA,EAAAA,IAAA,iBAAoBjC,EAApB,oBAAuCkC,IAH1B,uBAEbW,EAFa,EAErBR,KAAQQ,OAFa,kBAIhBA,GAJgB,2CAAH,qD","sources":["components/Cast.jsx","components/MoviesList.jsx","servises/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { BASE_IMG_URL } from './MoviesList';\nimport { getActorsByFilm } from '../servises/api';\nconst posterFakeUrl = 'https://titterfun.com/api/assets/image/1m7fesydid42.jpg';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getActorsByFilm(movieId).then(setCast);\n  }, [movieId]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <div>\n      {cast.length > 0 ? (\n        <ul className=\"Cast_list\">\n          {cast.map(actor => (\n            <li className=\"Cast_card\" key={actor.id}>\n              {actor.profile_path ? (\n                <img\n                  className=\"Actor_card\"\n                  src={`${BASE_IMG_URL + actor.profile_path}`}\n                  alt={actor.name}\n                  width={150}\n                  height={220}\n                />\n              ) : (\n                <img\n                  className=\"Actor_card\"\n                  src={`${posterFakeUrl}`}\n                  alt={actor.name}\n                  width={150}\n                  height={220}\n                />\n              )}\n              <p>{actor.name}</p>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No information</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import { NavLink, useLocation } from 'react-router-dom';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className=\"Movie_list\">\n      {movies.map(movie => (\n        <li className=\"Movie_link\" key={movie.id}>\n          <NavLink\n            style={() => ({\n              width: '200px',\n              height: '350px',\n              display: 'flex',\n              flexDirection: 'column',\n              alignContent: 'center',\n              justifyContent: 'space-between',\n            })}\n            to={`/movies/${movie.id}`}\n            state={{ from: location }}\n          >\n            <img\n              className=\"Movie_img\"\n              src={BASE_IMG_URL + movie.poster_path}\n              alt={movie.title}\n              width={200}\n            />\n            {movie.title}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '74469b9d93972ec6b26a5796c39ad279';\n\nexport const getTrandingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return results;\n};\n\nexport const getFilmsById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getFilmsByQuery = async query => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  console.log(results);\n  return results;\n};\n\nexport const getReviewByFilm = async id => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return results;\n};\n\nexport const getActorsByFilm = async id => {\n  const {\n    data: { cast },\n  } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  return cast;\n};\n\nexport const getGenres = async movieId => {\n  const {\n    data: { genres },\n  } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return genres;\n};\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getActorsByFilm","then","length","className","map","actor","profile_path","src","BASE_IMG_URL","alt","name","width","height","character","id","MoviesList","movies","location","useLocation","movie","style","display","flexDirection","alignContent","justifyContent","to","state","from","poster_path","title","axios","API_KEY","getTrandingFilms","results","data","getFilmsById","getFilmsByQuery","query","console","log","getReviewByFilm","getGenres","genres"],"sourceRoot":""}